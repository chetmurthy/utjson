import "lib/predefined.utj" as Predefined;
  module DEFINITIONS = struct
    type rec __properties_ecmaFeatures = object && [
        "arrowFunctions": boolean;
        "binaryLiterals": boolean;
        "blockBindings": boolean;
        "classes": boolean;
        "defaultParams": boolean;
        "destructuring": boolean;
        "experimentalObjectRestSpread": boolean;
        "forOf": boolean;
        "generators": boolean;
        "globalReturn": boolean;
        "impliedStrict": boolean;
        "jsx": boolean;
        "modules": boolean;
        "objectLiteralComputedProperties": boolean;
        "objectLiteralDuplicateProperties": boolean;
        "objectLiteralShorthandMethods": boolean;
        "objectLiteralShorthandProperties": boolean;
        "octalLiterals": boolean;
        "regexUFlag": boolean;
        "regexYFlag": boolean;
        "restParams": boolean;
        "spread": boolean;
        "superInFunctions": boolean;
        "templateStrings": boolean;
        "unicodeCodePointEscapes": boolean;
]
    and __properties_env = object && [
        "amd": boolean;
        "applescript": boolean;
        "atomtest": boolean;
        "browser": boolean;
        "commonjs": boolean;
        "shared-node-browser": boolean;
        "embertest": boolean;
        "es6": boolean;
        "greasemonkey": boolean;
        "jasmine": boolean;
        "jest": boolean;
        "jquery": boolean;
        "meteor": boolean;
        "mocha": boolean;
        "mongo": boolean;
        "nashorn": boolean;
        "node": boolean;
        "phantomjs": boolean;
        "prototypejs": boolean;
        "protractor": boolean;
        "qunit": boolean;
        "serviceworker": boolean;
        "shelljs": boolean;
        "webextensions": boolean;
        "worker": boolean;
]
    and __properties_globals = object && [ orelse string && [ enum "readonly", "writable", "off"; ] xor boolean; ]
    and __properties_parser = string
    and __properties_parserOptions = object && [
        "ecmaFeatures": __properties_ecmaFeatures;
        "ecmaVersion": [
            enum 3.0, 5.0, 6.0, 2015.0, 7.0, 2016.0, 8.0, 2017.0, 9.0, 2018.0,
            10.0, 2019.0, 11.0, 2020.0, 12.0, 2021.0;
] && [ default 11; ];
        "sourceType": [ enum "script", "module"; ] && [ default "script"; ];
]
    and __properties_plugins = array && [ of string; ]
    and __properties_rules = object && possibleErrors && bestPractices && strictMode && variables && nodeAndCommonJs && stylisticIssues && ecmaScript6 && legacy
    and __properties_settings = object
    and bestPractices = [
        "accessor-pairs": rule;
        "array-callback-return": rule;
        "block-scoped-var": rule;
        "class-methods-use-this": rule;
        "complexity": rule;
        "consistent-return": rule;
        "curly": rule;
        "default-case": rule;
        "dot-location": rule;
        "dot-notation": rule;
        "eqeqeq": rule;
        "guard-for-in": rule;
        "no-alert": rule;
        "no-caller": rule;
        "no-case-declarations": rule;
        "no-div-regex": rule;
        "no-else-return": rule;
        "no-empty-function": rule;
        "no-empty-pattern": rule;
        "no-eq-null": rule;
        "no-eval": rule;
        "no-extend-native": rule;
        "no-extra-bind": rule;
        "no-extra-label": rule;
        "no-fallthrough": rule;
        "no-floating-decimal": rule;
        "no-global-assign": rule;
        "no-implicit-coercion": rule;
        "no-implicit-globals": rule;
        "no-implied-eval": rule;
        "no-invalid-this": rule;
        "no-iterator": rule;
        "no-labels": rule;
        "no-lone-blocks": rule;
        "no-loop-func": rule;
        "no-magic-numbers": rule;
        "no-multi-spaces": rule;
        "no-multi-str": rule;
        "no-native-reassign": rule;
        "no-new": rule;
        "no-new-func": rule;
        "no-new-wrappers": rule;
        "no-octal": rule;
        "no-octal-escape": rule;
        "no-param-reassign": rule;
        "no-proto": rule;
        "no-redeclare": rule;
        "no-restricted-properties": rule;
        "no-return-assign": rule;
        "no-return-await": rule;
        "no-script-url": rule;
        "no-self-assign": rule;
        "no-self-compare": rule;
        "no-sequences": rule;
        "no-throw-literal": rule;
        "no-unmodified-loop-condition": rule;
        "no-unused-expressions": rule;
        "no-unused-labels": rule;
        "no-useless-call": rule;
        "no-useless-concat": rule;
        "no-useless-escape": rule;
        "no-useless-return": rule;
        "no-void": rule;
        "no-warning-comments": rule;
        "no-with": rule;
        "prefer-promise-reject-errors": rule;
        "radix": rule;
        "require-await": rule;
        "vars-on-top": rule;
        "wrap-iife": rule;
        "yoda": rule;
]
    and ecmaScript6 = [
        "arrow-body-style": rule;
        "arrow-parens": rule;
        "arrow-spacing": rule;
        "constructor-super": rule;
        "generator-star-spacing": rule;
        "no-class-assign": rule;
        "no-confusing-arrow": rule;
        "no-const-assign": rule;
        "no-dupe-class-members": rule;
        "no-duplicate-imports": rule;
        "no-new-symbol": rule;
        "no-restricted-imports": rule;
        "no-this-before-super": rule;
        "no-useless-computed-key": rule;
        "no-useless-constructor": rule;
        "no-useless-rename": rule;
        "no-var": rule;
        "object-shorthand": rule;
        "prefer-arrow-callback": rule;
        "prefer-const": rule;
        "prefer-destructuring": rule;
        "prefer-numeric-literals": rule;
        "prefer-reflect": rule;
        "prefer-rest-params": rule;
        "prefer-spread": rule;
        "prefer-template": rule;
        "require-yield": rule;
        "rest-spread-spacing": rule;
        "sort-imports": rule;
        "symbol-description": rule;
        "template-curly-spacing": rule;
        "yield-star-spacing": rule;
]
    and legacy = [
        "max-depth": rule;
        "max-len": rule;
        "max-params": rule;
        "max-statements": rule;
        "no-bitwise": rule;
        "no-plusplus": rule;
]
    and nodeAndCommonJs = [
        "callback-return": rule;
        "global-require": rule;
        "handle-callback-err": rule;
        "no-buffer-constructor": rule;
        "no-mixed-requires": rule;
        "no-new-require": rule;
        "no-path-concat": rule;
        "no-process-env": rule;
        "no-process-exit": rule;
        "no-restricted-modules": rule;
        "no-sync": rule;
]
    and possibleErrors = [
        "comma-dangle": rule;
        "for-direction": rule;
        "getter-return": rule;
        "no-await-in-loop": rule;
        "no-compare-neg-zero": rule;
        "no-cond-assign": rule;
        "no-console": rule;
        "no-constant-condition": rule;
        "no-control-regex": rule;
        "no-debugger": rule;
        "no-dupe-args": rule;
        "no-dupe-keys": rule;
        "no-duplicate-case": rule;
        "no-empty": rule;
        "no-empty-character-class": rule;
        "no-ex-assign": rule;
        "no-extra-boolean-cast": rule;
        "no-extra-parens": rule;
        "no-extra-semi": rule;
        "no-func-assign": rule;
        "no-inner-declarations": rule;
        "no-invalid-regexp": rule;
        "no-irregular-whitespace": rule;
        "no-negated-in-lhs": rule;
        "no-obj-calls": rule;
        "no-prototype-builtins": rule;
        "no-regex-spaces": rule;
        "no-sparse-arrays": rule;
        "no-template-curly-in-string": rule;
        "no-unexpected-multiline": rule;
        "no-unreachable": rule;
        "no-unsafe-finally": rule;
        "no-unsafe-negation": rule;
        "use-isnan": rule;
        "valid-jsdoc": rule;
        "valid-typeof": rule;
]
    and rule = Predefined.integer && [ bounds [0.0,2.0]; ] xor string && [ enum "off", "warn", "error"; ] xor array
    and strictMode = [ "strict": rule; ]
    and stylisticIssues = [
        "array-bracket-newline": rule;
        "array-bracket-spacing": rule;
        "array-element-newline": rule;
        "block-spacing": rule;
        "brace-style": rule;
        "camelcase": rule;
        "capitalized-comments": rule;
        "comma-dangle": rule;
        "comma-spacing": rule;
        "comma-style": rule;
        "computed-property-spacing": rule;
        "consistent-this": rule;
        "eol-last": rule;
        "func-call-spacing": rule;
        "func-name-matching": rule;
        "func-names": rule;
        "func-style": rule;
        "function-call-argument-newline": rule;
        "function-paren-newline": rule;
        "id-blacklist": rule;
        "id-length": rule;
        "id-match": rule;
        "implicit-arrow-linebreak": rule;
        "indent": rule;
        "indent-legacy": rule;
        "jsx-quotes": rule;
        "key-spacing": rule;
        "keyword-spacing": rule;
        "line-comment-position": rule;
        "lines-between-class-members": rule;
        "linebreak-style": rule;
        "lines-around-comment": rule;
        "lines-around-directive": rule;
        "max-depth": rule;
        "max-len": rule;
        "max-lines": rule;
        "max-nested-callbacks": rule;
        "max-params": rule;
        "max-statements": rule;
        "max-statements-per-line": rule;
        "multiline-comment-style": rule;
        "multiline-ternary": rule;
        "new-cap": rule;
        "newline-after-var": rule;
        "newline-before-return": rule;
        "newline-per-chained-call": rule;
        "new-parens": rule;
        "no-array-constructor": rule;
        "no-bitwise": rule;
        "no-continue": rule;
        "no-inline-comments": rule;
        "no-lonely-if": rule;
        "no-mixed-operators": rule;
        "no-mixed-spaces-and-tabs": rule;
        "no-multi-assign": rule;
        "no-multiple-empty-lines": rule;
        "no-negated-condition": rule;
        "no-nested-ternary": rule;
        "no-new-object": rule;
        "no-plusplus": rule;
        "no-restricted-syntax": rule;
        "no-spaced-func": rule;
        "no-tabs": rule;
        "no-ternary": rule;
        "no-trailing-spaces": rule;
        "no-underscore-dangle": rule;
        "no-unneeded-ternary": rule;
        "no-whitespace-before-property": rule;
        "nonblock-statement-body-position": rule;
        "object-curly-newline": rule;
        "object-curly-spacing": rule;
        "object-property-newline": rule;
        "object-shorthand": rule;
        "one-var": rule;
        "one-var-declaration-per-line": rule;
        "operator-assignment": rule;
        "operator-linebreak": rule;
        "padded-blocks": rule;
        "padding-line-between-statements": rule;
        "quote-props": rule;
        "quotes": rule;
        "require-jsdoc": rule;
        "semi": rule;
        "semi-spacing": rule;
        "semi-style": rule;
        "sort-keys": rule;
        "sort-vars": rule;
        "space-before-blocks": rule;
        "space-before-function-paren": rule;
        "spaced-comment": rule;
        "space-infix-ops": rule;
        "space-in-parens": rule;
        "space-unary-ops": rule;
        "switch-colon-spacing": rule;
        "template-tag-spacing": rule;
        "unicode-bom": rule;
        "wrap-regex": rule;
]
    and variables = [
        "init-declarations": rule;
        "no-catch-shadow": rule;
        "no-delete-var": rule;
        "no-label-var": rule;
        "no-restricted-globals": rule;
        "no-shadow": rule;
        "no-shadow-restricted-names": rule;
        "no-undef": rule;
        "no-undefined": rule;
        "no-undef-init": rule;
        "no-unused-vars": rule;
        "no-use-before-define": rule;
];
    end;
  open DEFINITIONS;
  type nonrec t = object && [
      "ecmaFeatures": object && [
          "arrowFunctions": boolean;
          "binaryLiterals": boolean;
          "blockBindings": boolean;
          "classes": boolean;
          "defaultParams": boolean;
          "destructuring": boolean;
          "experimentalObjectRestSpread": boolean;
          "forOf": boolean;
          "generators": boolean;
          "globalReturn": boolean;
          "impliedStrict": boolean;
          "jsx": boolean;
          "modules": boolean;
          "objectLiteralComputedProperties": boolean;
          "objectLiteralDuplicateProperties": boolean;
          "objectLiteralShorthandMethods": boolean;
          "objectLiteralShorthandProperties": boolean;
          "octalLiterals": boolean;
          "regexUFlag": boolean;
          "regexYFlag": boolean;
          "restParams": boolean;
          "spread": boolean;
          "superInFunctions": boolean;
          "templateStrings": boolean;
          "unicodeCodePointEscapes": boolean;
];
      "env": object && [
          "amd": boolean;
          "applescript": boolean;
          "atomtest": boolean;
          "browser": boolean;
          "commonjs": boolean;
          "shared-node-browser": boolean;
          "embertest": boolean;
          "es6": boolean;
          "greasemonkey": boolean;
          "jasmine": boolean;
          "jest": boolean;
          "jquery": boolean;
          "meteor": boolean;
          "mocha": boolean;
          "mongo": boolean;
          "nashorn": boolean;
          "node": boolean;
          "phantomjs": boolean;
          "prototypejs": boolean;
          "protractor": boolean;
          "qunit": boolean;
          "serviceworker": boolean;
          "shelljs": boolean;
          "webextensions": boolean;
          "worker": boolean;
];
      "extends": string || (array && [ of string; ]);
      "globals": object && [ orelse string && [ enum "readonly", "writable", "off"; ] xor boolean; ];
      "noInlineConfig": boolean;
      "parser": string;
      "parserOptions": object && [
          "ecmaFeatures": __properties_ecmaFeatures;
          "ecmaVersion": [
              enum 3.0, 5.0, 6.0, 2015.0, 7.0, 2016.0, 8.0, 2017.0, 9.0,
              2018.0, 10.0, 2019.0, 11.0, 2020.0, 12.0, 2021.0;
] && [ default 11; ];
          "sourceType": [ enum "script", "module"; ] && [ default "script"; ];
];
      "plugins": array && [ of string; ];
      "root": boolean;
      "ignorePatterns": (string || array) && [ of string; ];
      "rules": object && possibleErrors && bestPractices && strictMode && variables && nodeAndCommonJs && stylisticIssues && ecmaScript6 && legacy;
      "settings": object;
      "overrides": array && [
          of object && [
              "files": string xor array && [ of string; ] && [ size [1,max]; ];
              "extends": (string || array) && [ of string; ];
              "excludedFiles": string xor array && [ of string; ];
              "ecmaFeatures": __properties_ecmaFeatures;
              "env": __properties_env;
              "globals": __properties_globals;
              "parser": __properties_parser;
              "parserOptions": __properties_parserOptions;
              "plugins": __properties_plugins;
              "processor": string;
              "rules": __properties_rules;
              "settings": __properties_settings;
] && (object && [ sealed; ]) && [ required "files"; ];
];
];
