import "lib/predefined.utj" as Predefined;
  module DEFINITIONS = struct
    type nonrec account = string;
      type nonrec apiEndpoint = string && [ default "https://api.cf.eu10.hana.ondemand.com"; ];
      type nonrec appName = string;
      type nonrec appUrls = array && [
          of seal (object && [
              "url": string;
              "credentialId": string;
              "parameters": array;
] && [ required "url"; ]);
];
      type nonrec application = string; type nonrec space = string;
      type nonrec org = string; type nonrec mtaExtensionDescriptor = string;
      type nonrec mtaExtensionCredentials = string;
      type nonrec manifest = string; type nonrec credentialsId = string;
      type nonrec cfTargets = array && [
          of seal (object && [
              "org": org;
              "space": space;
              "appName": appName;
              "manifest": manifest;
              "credentialsId": credentialsId;
              "apiEndpoint": apiEndpoint;
              "mtaExtensionDescriptor": mtaExtensionDescriptor;
              "mtaExtensionCredentials": mtaExtensionCredentials;
]);
];
      type nonrec cloudFoundry = seal (object && [
          "org": org;
          "space": space;
          "appName": appName;
          "manifest": manifest;
          "credentialsId": credentialsId;
          "apiEndpoint": apiEndpoint;
          "mtaExtensionDescriptor": mtaExtensionDescriptor;
          "mtaExtensionCredentials": mtaExtensionCredentials;
]);
      type nonrec dockerImage = string; type nonrec environment = object;
      type nonrec host = string; type nonrec vmArguments = string;
      type nonrec size_ = string && [ default "lite"; ];
      type nonrec runtimeVersion = string; type nonrec runtime = string;
      type nonrec neoTargets = array && [
          of seal (object && [
              "host": host;
              "account": account;
              "application": application;
              "credentialsId": credentialsId;
              "environment": environment;
              "vmArguments": vmArguments;
              "size": size_;
              "runtime": runtime;
              "runtimeVersion": runtimeVersion;
] && [ required "host",  "account",  "application",  "runtime",  "runtimeVersion";
]);
];
    end;
  open DEFINITIONS;
  type nonrec t = object && [
      "customDefaults": array && [ of string; ];
      "general": seal ((object && [
          "productiveBranch": string && [ default "master"; ];
          "projectName": string;
          "globalExtensionsRepository": string;
          "globalExtensionsVersion": string;
          "globalExtensionsRepositoryCredentialsId": string;
          "collectTelemetryData": boolean && [ default true; ];
          "unsafeMode": boolean && [ default false; ];
          "features": seal (object && [
              "parallelTestExecution": string && [ enum "on", "off"; ] && [ default "off"; ];
]) with true;
          "jenkinsKubernetes": seal (object && [ "jnlpAgent": string && [ default "jenkins/jnlp-slave:latest"; ]; ]) with true;
] || null));
      "stages": (object && [
          "backendIntegrationTests": seal (object && [
              "retry": Predefined.integer && [ default 1; ];
              "forkCount": string && [ default "1C"; ];
              "credentials": array && [
                  of seal (object && [
                      "alias": string;
                      "credentialId": string;
] && [ required "alias",  "credentialId"; ]);
];
              "sidecarImage": string;
              "sidecarName": string;
              "sidecarReadyCommand": string;
              "sidecarEnvVars": object;
]);
          "frontEndIntegrationTests": seal (object && [ "dockerImage": dockerImage; ]);
          "frontEndUnitTests": seal (object && [ "dockerImage": dockerImage; ]);
          "endToEndTests": object && [
              "enableZeroDowntimeDeployment": boolean;
              "onlyRunInProductiveBranch": boolean;
              "appUrls": appUrls;
];
          "npmAudit": seal (object && [ "auditedAdvisories": array && [ of Predefined.integer || string; ]; ]);
          "performanceTests": object && [
              "neoTargets": neoTargets;
              "cfTargets": cfTargets;
];
          "s4SdkQualityChecks": seal (object && [
              "jacocoExcludes": array && [ of string; ];
              "customOdataServices": array && [ of string; ];
              "nonErpDestinations": array && [ of string; ];
              "nonErpUrls": array && [ of string; ];
              "codeCoverageFrontend": object;
              "threshold": seal (object && [
                  "successCoverage": Predefined.integer && [ bounds [70.0,max]; ];
                  "unstableCoverage": Predefined.integer && [ bounds [65.0,max]; ];
] && [ required "successCoverage",  "unstableCoverage"; ]);
              "disabledChecks": array && [
                  of string && [
                      enum "checkDeploymentDescriptors", "checkResilience",
                      "checkServices", "checkFrontendCodeCoverage",
                      "checkBackendCodeCoverage";
];
] && [ default []; ];
]);
          "checkmarxScan": seal (object && [
              "groupId": string;
              "checkMarxProjectName": string;
              "filterPattern": string && [
                  default "!**/*.log, !**/*.lock, !**/*.json, !**/*.html, !**/Cx*, !**/test/**, !s4hana_pipeline/**, !**/unit-tests/**, !**/integration-tests/**, !**/frontend-unit-tests/**, !**/e2e-tests/**, !**/performance-tests/**, **/*.js, **/*.java, **/*.ts";
];
              "fullScansScheduled": boolean && [ default false; ];
              "incremental": boolean && [ default true; ];
              "vulnerabilityThresholdMedium": Predefined.integer && [ default 0; ];
              "vulnerabilityThresholdLow": Predefined.integer && [ default 99999; ];
              "preset": (Predefined.integer && [ default 36; ] || string);
              "checkmarxCredentialsId": string;
              "checkmarxServerUrl": string;
              "generatePdfReport": boolean;
] && [ required "groupId"; ]);
          "productionDeployment": object && [
              "appUrls": appUrls;
              "neoTargets": neoTargets;
              "cfTargets": cfTargets;
];
          "artifactDeployment": seal (object && [
              "nexus": object && [
                  "version": string && [ enum "nexus2", "nexus3"; ] && [ default "nexus3"; ];
                  "url": string;
                  "mavenRepository": string;
                  "npmRepository": string;
                  "credentialsId": credentialsId;
] && [ required "url",  "repository"; ];
]) with true;
          "whitesourceScan": seal (object && [
              "product": string;
              "staticVersion": string;
              "credentialsId": credentialsId;
              "whitesourceUserTokenCredentialsId": string;
] && [ required "product",  "credentialsId"; ]) with true;
          "sourceClearScan": seal (object && [
              "credentialsId": credentialsId;
              "config": object && [
                  "vuln_methods_extra_ignored_directories": string;
                  "scope": string;
];
] && [ required "credentialsId"; ]);
          "compliance": seal (object && [ "runInAllBranches": boolean && [ default false; ]; ]);
] || null);
      "steps": (object && [
          "mavenExecute": object && [
              "dockerImage": dockerImage && [ default "maven:3.6.3-jdk-8-slim"; ];
              "projectSettingsFile": string;
];
          "artifactPrepareVersion": object && [
              "dockerImage": dockerImage;
              "commitUserName": string;
              "includeCommitId": boolean && [ default "true"; ];
              "tagPrefix": string;
              "unixTimestamp": boolean && [ default "false"; ];
              "versioningType": string;
];
          "executeNpm": object && [
              "dockerImage": dockerImage && [ default "ppiper/node-browsers:v2"; ];
              "defaultNpmRegistry": string && [ default "npmjs.com"; ];
];
          "executeSourceClearScan": object && [ "dockerImage": dockerImage && [ default "ppiper/mta-archive-builder:v1"; ];
];
          "cloudFoundryDeploy": object && [
              "dockerImage": dockerImage && [ default "ppiper/cf-cli:v2"; ];
              "smokeTestStatusCode": Predefined.integer && [ default 200; ];
              "keepOldInstance": boolean && [ default true; ];
              "cloudFoundry": cloudFoundry;
];
          "neoDeploy": object && [
              "dockerImage": dockerImage && [ default "ppiper/neo-cli:v2"; ];
              "neo": seal (object && [
                  "host": host;
                  "account": account;
                  "application": application;
                  "credentialsId": credentialsId;
                  "environment": environment;
                  "vmArguments": vmArguments;
                  "size": size_;
                  "runtime": runtime;
                  "runtimeVersion": runtimeVersion;
] && [ required "host",  "account",  "application",  "runtime",  "runtimeVersion";
]);
];
          "checkGatling": object && [ "enabled": boolean && [ default false; ]; ];
          "checkJMeter": object && [
              "options": string;
              "testPlan": string && [ default "./performance-tests/*"; ];
              "dockerImage": dockerImage && [ default "famiko/jmeter-base"; ];
              "failThreshold": Predefined.integer && [ default 100; ];
              "unstableThreshold": Predefined.integer && [ default 90; ];
];
          "fortifyExecuteScan": object && [
              "dockerImage": dockerImage;
              "verbose": boolean && [ default false; ];
              "fortifyCredentialsId": string;
              "githubTokenCredentialsId": string;
              "serverUrl": string;
              "projectName": string;
              "defaultVersioningModel": string && [ default "major"; ];
              "buildTool": string && [ default "maven"; ];
              "autoCreate": boolean && [ default false; ];
              "uploadResults": boolean && [ default true; ];
              "memory": string && [ default "-Xmx4G -Xms512M"; ];
              "src": array && [ of string; ];
              "exclude": array && [ of string; ];
] && [ required "fortifyCredentialsId"; ];
          "whitesourceExecuteScan": seal (object && [
              "productName": string;
              "productVersion": string;
              "orgAdminUserTokenCredentialsId": credentialsId;
              "userTokenCredentialsId": string;
] && [ required "productName",  "orgAdminUserTokenCredentialsId"; ]) with true;
          "mtaBuild": object && [
              "dockerImage": dockerImage && [ default "ppiper/mta-archive-builder"; ];
              "buildTarget": string && [ default "NEO"; ];
              "mtaBuildTool": string && [ default "cloudMbt"; ];
              "applicationName": string;
              "defaultNpmRegistry": string;
              "dockerOptions": array || string;
              "extension": string;
              "globalSettingsFile": string;
              "projectSettingsFile": string;
              "mtaJarLocation": string && [ default "/opt/sap/mta/lib/mta.jar"; ];
];
          "debugReportArchive": object && [ "shareConfidentialInformation": boolean && [ default false; ]; ];
          "sonarExecuteScan": seal (object && [
              "projectKey": string;
              "instance": string;
              "options": array || string;
              "dockerImage": dockerImage && [ default "ppiper/node-browsers:v3"; ];
] && [ required "projectKey",  "instance"; ]) with true;
          "tmsUpload": object && [
              "nodeName": string;
              "credentialsId": string;
              "customDescription": string && [ default "<Corresponding Git Commit-ID>"; ];
];
] || null);
      "postActions": object && [
          "sendNotification": (object && [
              "enabled": boolean && [ default false; ];
              "skipFeatureBranches": boolean && [ default false; ];
              "recipients": array && [ of string; ];
] || null);
];
];
