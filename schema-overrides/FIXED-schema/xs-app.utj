import "lib/predefined.utj" as Predefined;
  module DEFINITIONS = struct
    type rec scopeTemplate = (string && [ size [1,max]; ] || array && [ of string && [ size [1,max]; ]; ] && [ size [1,max]; ])
    and scopesSchema = (string && [ size [1,max]; ] || array && [ of string && [ size [1,max]; ]; ] && [ size [1,max]; ] || object && [
        "GET": scopeTemplate;
        "POST": scopeTemplate;
        "HEAD": scopeTemplate;
        "PUT": scopeTemplate;
        "DELETE": scopeTemplate;
        "TRACE": scopeTemplate;
        "PATCH": scopeTemplate;
        "OPTIONS": scopeTemplate;
        "CONNECT": scopeTemplate;
        "default": scopeTemplate;
] && [ size [1,max]; ] && [ sealed; ])
    and sourceSchema = (string && [ format "regex"; ] && [ size [1,max]; ] || object && [
        "path": string && [ size [1,max]; ] && [ format "regex"; ];
        "matchCase": boolean;
] && [ sealed; ] && [ required "path"; ]);
    end;
  open DEFINITIONS;
  type nonrec t = object && [
      "welcomeFile": string && [ size [1,max]; ];
      "authenticationMethod": string && [ enum "none", "route"; ];
      "sessionTimeout": Predefined.integer && [ bounds [1.0,max]; ];
      "pluginMetadataEndpoint": string && [ size [1,max]; ] && [ format "uri-reference"; ];
      "routes": array && [
          of object && [
              "source": sourceSchema;
              "httpMethods": array && [
                  of string && [ enum "DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT", "TRACE", "PATCH"; ];
] && [ size [1,max]; ];
              "target": string && [ size [1,max]; ] && [ format "uri-reference"; ];
              "destination": string && [ size [1,max]; ];
              "localDir": string && [ size [1,max]; ];
              "csrfProtection": boolean;
              "service": string;
              "endpoint": string;
              "authenticationType": string && [ enum "xsuaa", "basic", "none"; ];
              "identityProvider": string && [ size [1,max]; ];
              "scope": scopesSchema;
              "replace": object && [
                  "pathSuffixes": array && [ of string && [ size [1,max]; ] && [ format "uri-reference"; ]; ];
                  "vars": array && [ of string && [ size [1,max]; ]; ];
                  "services": object;
] && (object && [ sealed; ]) && [ required "pathSuffixes"; ];
              "cacheControl": string && [ size [1,max]; ] && [ format "valid-header-value"; ];
] && (object && [ sealed; ]) && [ required "source"; ];
];
      "destinations": object && [
          orelse object && [
              "logoutPath": string && [ size [1,max]; ] && [ format "uri-reference"; ];
              "logoutMethod": string && [ enum "PUT", "POST", "GET"; ];
] && object && [ sealed; ];
] && [ format "destinations-rules"; ];
      "services": object && [
          orelse object && [
              "endpoint": string && [ size [1,max]; ];
              "logoutPath": string && [ size [1,max]; ] && [ format "uri-reference"; ];
              "logoutMethod": string && [ enum "PUT", "POST", "GET"; ];
] && object && [ sealed; ];
] && [ format "services-rules"; ];
      "logout": object && [
          "logoutEndpoint": string && [ size [1,max]; ] && [ format "uri-reference"; ];
          "logoutPage": string && [ size [1,max]; ] && [ format "uri"; ];
] && (object && [ sealed; ]);
      "login": object && [
          "callbackEndpoint": string && [ size [1,max]; ] && [ format "uri-reference"; ];
] && (object && [ sealed; ]) && [ required "callbackEndpoint"; ];
      "whitelistService": object && [ "endpoint": string && [ size [1,max]; ] && [ format "uri-reference"; ]; ] && (object && [ sealed; ]) && [ required "endpoint"; ];
      "compression": object && [
          "enabled": boolean;
          "minSize": Predefined.integer && [ bounds [1.0,max]; ];
] && object && [ sealed; ];
      "websockets": object && [ "enabled": boolean; ] && (object && [ sealed; ]) && [ required "enabled"; ];
      "errorPage": array && [
          of object && [
              "status": (Predefined.integer && [ bounds [1.0,max]; ] || array && [ of Predefined.integer && [ bounds [1.0,max]; ]; ] && [ unique; ] && [ size [1,max]; ]);
              "file": string && [ size [1,max]; ] && [ format "local-file"; ];
] && [ required "status",  "file"; ];
] && object && [ sealed; ];
];
