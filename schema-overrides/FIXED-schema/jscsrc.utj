import "lib/predefined.utj" as Predefined;
  module DEFINITIONS = struct
    type rec blockKeywords = null || (array && [
        of [
            enum "catch", "do", "else", "finally", "for", "function", "if",
            "try", "while";
];
] && [ unique; ])
    and braceRules = null || (object && [
        "beforeOpeningRoundBrace": boolean || null;
        "beforeOpeningCurlyBrace": boolean || null;
])
    and equalityOperators = boolean || null || (array && [ of [ enum "==", "===", "!=", "!==", null; ]; ] && [ unique; ])
    and esprimaNodeTypes = null || (array && [
        of [
            enum "ArrayExpression", "ArrayPattern", "ArrowFunctionExpression",
            "AssignmentExpression", "AssignmentPattern", "BinaryExpression",
            "BlockStatement", "BreakStatement", "CallExpression",
            "CatchClause", "ClassBody", "ClassDeclaration", "ClassExpression",
            "ConditionalExpression", "ContinueStatement", "DebuggerStatement",
            "DoWhileStatement", "EmptyStatement", "ExportAllDeclaration",
            "ExportDefaultDeclaration", "ExportNamedDeclaration",
            "ExportSpecifier", "ExpressionStatement", "ForInStatement",
            "ForStatement", "FunctionDeclaration", "FunctionExpression",
            "Identifier", "IfStatement", "ImportDeclaration",
            "ImportDefaultSpecifier", "ImportNamespaceSpecifier",
            "ImportSpecifier", "LabeledStatement", "Literal",
            "LogicalExpression", "MemberExpression", "MethodDefinition",
            "NewExpression", "ObjectExpression", "ObjectPattern", "Program",
            "Property", "RestElement", "ReturnStatement",
            "SequenceExpression", "SpreadElement", "Super", "SwitchCase",
            "SwitchStatement", "TaggedTemplateExpression", "TemplateElement",
            "TemplateLiteral", "ThisExpression", "ThrowStatement",
            "TryStatement", "UnaryExpression", "UpdateExpression",
            "VariableDeclaration", "VariableDeclarator", "WhileStatement",
            "WithStatement";
];
] && [ unique; ])
    and jsDoc = object && [
        "checkAnnotations": (boolean || null || object || string) && (boolean xor nullRule xor object && [
            "preset": string && ([ enum "closurecompiler"; ] xor [ enum "jsdoc3"; ] xor [ enum "jsduck5"; ]);
            "extra": object && [ orelse (boolean || string) && [ enum true, false, "some"; ]; ];
] xor string && ([ enum "closurecompiler"; ] xor [ enum "jsdoc3"; ] xor [ enum "jsduck5"; ]));
        "checkParamExistence": boolean || null;
        "checkParamNames": boolean || null;
        "requireParamTypes": boolean || null;
        "checkRedundantParams": boolean || null;
        "checkReturnTypes": boolean || null;
        "checkRedundantReturns": boolean || null;
        "requireReturnTypes": boolean || null;
        "checkTypes": (boolean || null || string) && (boolean xor nullRule xor string && ([ enum "strictNativeCase"; ] xor [ enum "capitalizedNativeCase"; ]));
        "checkRedundantAccess": (boolean || null || string) && (boolean xor nullRule xor string && ([ enum "enforceLeadingUnderscore"; ] xor [ enum "enforceTrailingUnderscore"; ]));
        "leadingUnderscoreAccess": (boolean || null || string) && (boolean xor nullRule xor string && ([ enum "private"; ] xor [ enum "protected"; ]));
        "enforceExistence": (boolean || null || object || string) && (boolean xor nullRule xor object && [
            "allExcept": array && [
                of string && ([ enum "expressions"; ] xor [ enum "exports"; ] xor [ enum "paramless-procedures"; ]);
] && [ unique; ] && [ size [0,max]; ];
] xor string && [ enum "exceptExports"; ]);
        "requireHyphenBeforeDescription": boolean || null;
        "requireNewlineAfterDescription": boolean || null;
        "disallowNewlineAfterDescription": boolean || null;
        "requireDescriptionCompleteSentence": boolean || null;
        "requireParamDescription": boolean || null;
        "requireReturnDescription": boolean || null;
] && object
    and keywords = null || (array && [
        of [
            enum "break", "case", "catch", "continue", "debugger", "default",
            "delete", "do", "else", "finally", "for", "function", "if", "in",
            "instanceof", "new", "return", "switch", "this", "throw", "try",
            "typeof", "var", "void", "while", "with";
];
] && [ unique; ])
    and keywords2 = (array || boolean || null) && (keywords xor boolean)
    and nullRule = null
    and operators = boolean || null || (array && [
        of [
            enum ",", ":", "?", "^", "^=", "|", "||", "|=", "&", "&&", "&=",
            "+", "+=", "-", "-=", "%", "%=", "/", "/=", "*", "*=", "=", "==",
            "===", "!=", "!==", ">", ">>", ">>>", ">=", ">>=", ">>>=", "<",
            "<<", "<=", "<<=", null;
];
] && [ unique; ])
    and unaryOperators = boolean || null || (array && [ of [ enum "++", "--", "+", "-", "~", "!"; ]; ] && [ unique; ]);
    end;
  open DEFINITIONS;
  type nonrec t = object && [
      "additionalRules": array && [ of string; ] && [ unique; ];
      "disallowAnonymousFunctions": boolean || null;
      "disallowArrowFunctions": boolean || null;
      "disallowCapitalizedComments": boolean || null;
      "disallowCommaBeforeLineBreak": (boolean || null || object) && (boolean xor nullRule xor object && [
          "allExcept": array && [ of [ enum "function"; ]; ] && [ unique; ] && [ size [0,max]; ];
]);
      "disallowCurlyBraces": (array || boolean || null) && keywords2;
      "disallowDanglingUnderscores": (boolean || null || object) && (boolean xor nullRule xor object && [ "allExcept": array && [ of string; ] && [ unique; ] && [ size [0,max]; ]; ]);
      "disallowEmptyBlocks": (boolean || null || object) && (boolean xor nullRule xor object && [
          "allExcept": array && [ of [ enum "comments"; ]; ] && [ unique; ] && [ size [0,max]; ];
]);
      "disallowFunctionDeclarations": boolean || null;
      "disallowIdenticalDestructuringNames": boolean || null;
      "disallowIdentifierNames": null || (array && (array && [ of string; ] && [ unique; ] && [ size [0,max]; ] xor nullRule));
      "disallowImplicitTypeConversion": null || (array && [ of [ enum "numeric", "boolean", "binary", "string"; ]; ] && [ unique; ]);
      "disallowKeywordsInComments": (array || boolean || null || string) && (array && [ of string; ] && [ unique; ] && [ size [0,max]; ] xor boolean xor nullRule xor string);
      "disallowKeywordsOnNewLine": (array || null) && keywords;
      "disallowKeywords": (array || null) && keywords;
      "disallowMixedSpacesAndTabs": (boolean || null || string) && [ enum true, false, null, "smart"; ];
      "disallowMultiLineTernary": boolean || null;
      "disallowMultipleLineBreaks": boolean || null;
      "disallowMultipleLineStrings": boolean || null;
      "disallowMultipleSpaces": (boolean || null || object) && (boolean xor nullRule xor object && [ "allowEOLComments": boolean || null; ]);
      "disallowMultipleVarDecl": (boolean || null || object) && (boolean xor nullRule xor object && [
          "strict": boolean || null;
          "allExcept": array && [ of string && ([ enum "require"; ] xor [ enum "undefined"; ]); ] && [ unique; ] && [ size [0,max]; ];
]);
      "disallowNamedUnassignedFunctions": boolean || null;
      "disallowNestedTernaries": (boolean || null || object) && (boolean xor nullRule xor object && [ "maxLevel": Predefined.integer && [ bounds [1.0,max]; ]; ]);
      "disallowNewlineBeforeBlockStatements": (array || boolean || null || object) && (blockKeywords xor boolean xor nullRule xor object && [
          "value": array || boolean;
          "allExcept": array && [ of string || [ enum "multiline"; ]; ] && [ unique; ] && [ size [0,max]; ];
]);
      "disallowNodeTypes": (array || null) && esprimaNodeTypes;
      "disallowNotOperatorsInConditionals": boolean || null;
      "disallowObjectKeysOnNewLine": boolean || null;
      "disallowOperatorBeforeLineBreak": (array || boolean || null) && operators;
      "disallowPaddingNewLinesAfterBlocks": boolean || null;
      "disallowPaddingNewLinesAfterUseStrict": boolean || null;
      "disallowPaddingNewLinesBeforeExport": boolean || null;
      "disallowPaddingNewlinesBeforeKeywords": (array || boolean || null) && keywords2;
      "disallowPaddingNewLinesBeforeLineComments": (boolean || null) && (boolean xor nullRule);
      "disallowPaddingNewlinesInBlocks": (boolean || null || object) && (boolean xor nullRule xor object && [
          "close": boolean;
          "open": boolean;
          "allExcept": array && [ of [ enum "conditionals", "functions"; ]; ] && [ unique; ] && [ size [0,max]; ];
]);
      "disallowPaddingNewLinesInObjects": boolean || null;
      "disallowParenthesesAroundArrowParam": boolean || null;
      "disallowQuotedKeysInObjects": (boolean || null || object || string) && (boolean xor nullRule xor object && [
          "allExcept": array && [ of string || [ enum "reserved"; ]; ] && [ unique; ] && [ size [0,max]; ];
] xor string && [ enum "allButReserved"; ]);
      "disallowSemicolons": boolean || null;
      "disallowShorthandArrowFunctions": boolean || null;
      "disallowSpaceAfterBinaryOperators": (array || boolean || null) && operators;
      "disallowSpaceAfterComma": (boolean || null || object) && (boolean xor nullRule xor object && [
          "allExcept": array && [ of string && [ enum "sparseArrays"; ]; ] && [ unique; ] && [ size [0,max]; ];
]);
      "disallowSpaceAfterKeywords": (array || boolean || null) && keywords2;
      "disallowSpaceAfterLineComment": boolean || null;
      "disallowSpaceAfterObjectKeys": (boolean || null || object || string) && (boolean xor nullRule xor object && [
          "allExcept": array && [
              of string && ([ enum "singleline"; ] xor [ enum "multiline"; ] xor [ enum "aligned"; ] xor [ enum "method"; ]);
] && [ unique; ] && [ size [0,max]; ];
] xor string && ([ enum "ignoreSingleLine"; ] xor [ enum "ignoreMultiLine"; ]));
      "disallowSpaceAfterPrefixUnaryOperators": (array || boolean || null) && unaryOperators;
      "disallowSpaceBeforeBinaryOperators": (array || boolean || null) && operators;
      "disallowSpaceBeforeBlockStatements": boolean || null;
      "disallowSpaceBeforeComma": (boolean || null || object || string) && (boolean xor nullRule xor object && [
          "allExcept": array && [ of string && [ enum "sparseArrays"; ]; ] && [ unique; ] && [ size [0,max]; ];
] xor string && [ enum "exceptExports"; ]);
      "disallowSpaceBeforeKeywords": (array || boolean || null) && keywords2;
      "disallowSpaceBeforeObjectValues": boolean || null;
      "disallowSpaceBeforePostfixUnaryOperators": (array || boolean || null) && unaryOperators;
      "disallowSpaceBeforeSemicolon": (boolean || null || object) && (boolean xor nullRule xor object && [
          "allExcept": array && [ of string && ([ enum "("; ] || string && [ size [0,1]; ]); ] && [ unique; ] && [ size [0,max]; ];
]);
      "disallowSpaceBetweenArguments": boolean || null;
      "disallowSpacesInAnonymousFunctionExpression": (null || object) && braceRules;
      "disallowSpacesInCallExpression": boolean || null;
      "disallowSpacesInConditionalExpression": (boolean || null || object) && (boolean || nullRule || [
          "afterConsequent": boolean;
          "afterTest": boolean;
          "beforeAlternate": boolean;
          "beforeConsequent": boolean;
]);
      "disallowSpacesInForStatement": boolean || null;
      "disallowSpacesInFunction": (null || object) && braceRules;
      "disallowSpacesInFunctionDeclaration": (null || object) && braceRules;
      "disallowSpacesInFunctionExpression": (null || object) && braceRules;
      "disallowSpacesInGenerator": (null || object) && (nullRule xor object && [
          "beforeStar": boolean;
          "afterStar": boolean;
]);
      "disallowSpacesInNamedFunctionExpression": (null || object) && braceRules;
      "disallowSpacesInsideArrayBrackets": (boolean || null || object || string) && ((boolean || string) && [ enum true, false, "all"; ] xor nullRule xor object && [
          "allExcept": array && [ of string && [ enum "(", ")", "{", "}", "[", "]"; ]; ] && [ unique; ] && [ size [0,max]; ];
] xor string && [ enum "nested"; ]);
      "disallowSpacesInsideBrackets": (boolean || null || object) && (boolean xor nullRule xor object && [
          "allExcept": array && [ of string && [ enum "(", ")", "{", "}", "[", "]"; ]; ] && [ unique; ] && [ size [0,max]; ];
]);
      "disallowSpacesInsideObjectBrackets": (boolean || null || object || string) && ((boolean || string) && [ enum true, false, "all"; ] xor nullRule xor object && [
          "allExcept": array && [ of string && [ enum ")", "}", "]"; ]; ] && [ unique; ] && [ size [0,max]; ];
] xor string && [ enum "nested"; ]);
      "disallowSpacesInsideParentheses": (boolean || null || string || object) && ((boolean || string) && [ enum true, false, "all"; ] xor nullRule xor object && [
          "only": array && [
              of string && ([ enum "(", ")", "{", "}", "[", "]", "function"; ] || string && [ size [1,max]; ]);
] && [ unique; ] && [ size [0,max]; ];
]);
      "disallowSpacesInsideParenthesizedExpression": (boolean || null || object) && (boolean xor nullRule xor object && [
          "allExcept": array && [ of string && [ enum "(", ")", "{", "}", "[", "]", "function"; ]; ] && [ unique; ] && [ size [0,max]; ];
]);
      "disallowSpacesInsideTemplateStringPlaceholders": (boolean || null) && (boolean xor nullRule);
      "disallowTabs": (boolean || null) && (boolean xor nullRule);
      "disallowTrailingComma": (boolean || null) && (boolean xor nullRule);
      "disallowTrailingWhitespace": (boolean || null || string) && ((boolean || string) && [ enum true, false, "ignoreEmptyLines"; ] xor nullRule);
      "disallowUnusedParams": (boolean || null) && (boolean xor nullRule);
      "disallowVar": boolean xor nullRule;
      "disallowYodaConditions": (array || boolean || null) && equalityOperators;
      "excludeFiles": array && [ of string; ] && [ unique; ];
      "jsDoc": jsDoc;
      "maximumLineLength": (Predefined.integer || null || object) && (Predefined.integer && [ bounds [1.0,max]; ] xor nullRule xor object && [
          "allExcept": array && [
              of [ enum "comments"; ] || [ enum "functionSignature"; ] || [ enum "regex"; ] || [ enum "require"; ] || [ enum "urlComments"; ];
] && [ unique; ] && [ size [0,max]; ];
          "tabSize": Predefined.integer && [ bounds [1.0,max]; ];
          "value": Predefined.integer && [ bounds [1.0,max]; ];
] && [ required "value"; ]);
      "maximumNumberOfLines": (Predefined.integer || null || object) && (Predefined.integer && [ bounds [1.0,max]; ] xor nullRule xor object && [
          "allExcept": array && [ of [ enum "comments"; ]; ] && [ unique; ] && [ size [0,max]; ];
          "value": Predefined.integer && [ bounds [1.0,max]; ];
] && [ required "value"; ]);
      "preset": string && [
          enum "airbnb", "crockford", "google", "grunt", "idiomatic",
          "jquery", "mdcs", "node-style-guide", "wikimedia", "wordpress",
          "yandex";
];
      "requireAlignedMultilineParams": (boolean || Predefined.integer || null || string) && (boolean xor Predefined.integer xor nullRule xor string && [ enum "firstParam"; ]);
      "requireAlignedObjectValues": (null || string) && (nullRule xor string && ([ enum "all"; ] xor [ enum "ignoreFunction"; ] xor [ enum "ignoreLineBreak"; ]));
      "requireAnonymousFunctions": (boolean || null || object) && (boolean xor nullRule xor object && [
          "allExcept": array && [ of [ enum "declarations"; ]; ] && [ unique; ] && [ size [0,max]; ];
]);
      "requireArrayDestructuring": (boolean || null) && (boolean xor nullRule);
      "requireArrowFunctions": (boolean || null) && (boolean xor nullRule);
      "requireBlocksOnNewline": (boolean || Predefined.integer || null || object) && (boolean xor Predefined.integer xor nullRule xor object && [
          "includeComments": boolean;
          "minLines": Predefined.integer;
]);
      "requireCamelCaseOrUpperCaseIdentifiers": (boolean || null || object || string) && (boolean xor nullRule xor object && [
          "allExcept": array && [ of string; ] && [ unique; ] && [ size [0,max]; ];
          "allowedPrefixes": array && [ of string; ] && [ unique; ] && [ size [0,max]; ];
          "allowedSuffixes": array && [ of string; ] && [ unique; ] && [ size [0,max]; ];
          "ignoreProperties": boolean;
          "strict": boolean;
] xor string && [ enum "ignoreProperties"; ]);
      "requireCapitalizedComments": (boolean || null || object) && (boolean xor nullRule xor object && [
          "allExcept": array && [ of string; ] && [ unique; ] && [ size [0,max]; ];
          "inlined": boolean;
]);
      "requireCapitalizedConstructorsNew": (boolean || null || object) && (boolean xor nullRule xor object && [ "allExcept": array && [ of string; ] && [ unique; ] && [ size [0,max]; ]; ]);
      "requireCapitalizedConstructors": (boolean || null || object) && (boolean xor nullRule xor object && [ "allExcept": array && [ of string; ] && [ unique; ] && [ size [0,max]; ]; ]);
      "requireCommaBeforeLineBreak": (boolean || null) && (boolean xor nullRule);
      "requireCurlyBraces": (array || boolean || null || object) && (keywords2 xor object && [
          "keywords": array && [ of string; ] && [ unique; ] && [ size [0,max]; ];
          "allExcept": array && [ of string; ] && [ unique; ] && [ size [0,max]; ];
]);
      "requireDollarBeforejQueryAssignment": (boolean || null || string) && ((boolean || string) && [ enum true, false, "ignoreProperties"; ] xor nullRule);
      "requireDotNotation": (boolean || null || object || string) && (boolean xor nullRule xor object && [
          "allExcept": array && [ of string && ([ enum "keywords"; ] xor [ enum "snake_case"; ]); ] && [ unique; ] && [ size [0,max]; ];
] xor string && [ enum "except_snake_case"; ]);
      "requireEarlyReturn": (boolean || null) && (boolean xor nullRule);
      "requireEnhancedObjectLiterals": (boolean || null) && (boolean xor nullRule);
      "requireFunctionDeclarations": (boolean || null) && (boolean xor nullRule);
      "requireImportAlphabetized": (boolean || null) && (boolean xor nullRule);
      "requireKeywordsOnNewLine": (array || null) && keywords;
      "requireLineBreakAfterVariableAssignment": (boolean || null) && (boolean xor nullRule);
      "requireLineFeedAtFileEnd": (boolean || null) && (boolean xor nullRule);
      "requireMatchingFunctionName": (boolean || null || object) && (boolean xor nullRule xor object && [ "includeModuleExports": boolean; ]);
      "requireMultiLineTernary": (boolean || null) && (boolean xor nullRule);
      "requireMultipleVarDecl": (boolean || null || object || string) && (boolean xor nullRule xor object && [
          "allExcept": array && [ of string && [ enum "require"; ]; ] && [ unique; ] && [ size [0,max]; ];
] xor string && [ enum "onevar"; ]);
      "requireNamedUnassignedFunctions": (boolean || null || object) && (boolean xor nullRule xor object && [ "allExcept": array && [ of string; ] && [ unique; ] && [ size [0,max]; ]; ]);
      "requireNewlineBeforeBlockStatements": (array || boolean || null) && keywords2;
      "requireNumericLiterals": (boolean || null) && (boolean xor nullRule);
      "requireObjectDestructuring": (boolean || null) && (boolean xor nullRule);
      "requireObjectKeysOnNewLine": (boolean || null || object) && (boolean xor nullRule xor object && [
          "allExcept": array && [ of string && [ enum "sameLine"; ]; ] && [ unique; ] && [ size [0,max]; ];
]);
      "requireOperatorBeforeLineBreak": (array || boolean || null) && operators;
      "requirePaddingNewLineAfterVariableDeclaration": (boolean || null) && (boolean xor nullRule);
      "requirePaddingNewLinesAfterBlocks": (boolean || null || object) && (boolean xor nullRule xor object && [
          "allExcept": array && [
              of string && ([ enum "inCallExpressions"; ] xor [ enum "inNewExpressions"; ] xor [ enum "inArrayExpressions"; ] xor [ enum "inProperties"; ]);
] && [ unique; ] && [ size [0,max]; ];
]);
      "requirePaddingNewLinesAfterUseStrict": (boolean || null || object) && (boolean xor nullRule xor object && [
          "allExcept": array && [ of string && [ enum "require"; ]; ] && [ unique; ] && [ size [0,max]; ];
]);
      "requirePaddingNewLinesBeforeExport": (boolean || null) && (boolean xor nullRule);
      "requirePaddingNewlinesBeforeKeywords": (array || boolean || null) && keywords2;
      "requirePaddingNewLinesBeforeLineComments": (boolean || null || object) && (boolean xor nullRule xor object && [
          "allExcept": array && [ of string && [ enum "firstAfterCurly"; ]; ] && [ unique; ] && [ size [0,max]; ];
]);
      "requirePaddingNewlinesInBlocks": (boolean || Predefined.integer || null || object) && (boolean xor Predefined.integer xor nullRule xor object && [
          "open": boolean;
          "close": boolean;
          "allExcept": array && [ of string && ([ enum "conditionals"; ] xor [ enum "functions"; ]); ] && [ unique; ] && [ size [0,max]; ];
]);
      "requirePaddingNewLinesInObjects": (boolean || null) && (boolean xor nullRule);
      "requireParenthesesAroundArrowParam": (boolean || null) && (boolean xor nullRule);
      "requireParenthesesAroundIIFE": (boolean || null) && (boolean xor nullRule);
      "requireQuotedKeysInObjects": (boolean || null) && (boolean xor nullRule);
      "requireSemicolons": (boolean || null) && (boolean xor nullRule);
      "requireShorthandArrowFunctions": (boolean || null) && (boolean xor nullRule);
      "requireSpaceAfterBinaryOperators": (array || boolean || null) && operators;
      "requireSpaceAfterComma": (boolean || null || object) && (boolean xor nullRule xor object && [
          "allExcept": array && [ of string && [ enum "trailing"; ]; ] && [ unique; ] && [ size [0,max]; ];
]);
      "requireSpaceAfterKeywords": (array || boolean || null) && keywords2;
      "requireSpaceAfterLineComment": (boolean || null || object || string) && (boolean xor nullRule xor object && [ "allExcept": array && [ of string; ] && [ unique; ] && [ size [0,max]; ];
] xor string && [ enum "allowSlash"; ]);
      "requireSpaceAfterObjectKeys": (boolean || null) && (boolean xor nullRule);
      "requireSpaceAfterPrefixUnaryOperators": (array || boolean || null) && unaryOperators;
      "requireSpaceBeforeBinaryOperators": (array || boolean || null) && operators;
      "requireSpaceBeforeBlockStatements": (boolean || null || Predefined.integer) && (boolean xor nullRule xor Predefined.integer && [ bounds [1.0,max]; ]);
      "requireSpaceBeforeComma": (boolean || null) && (boolean xor nullRule);
      "requireSpaceBeforeKeywords": (array || boolean || null || object) && (blockKeywords xor boolean xor nullRule xor object && [ "allExcept": array && [ of string; ] && [ unique; ] && [ size [0,max]; ]; ]);
      "requireSpaceBeforeObjectValues": (boolean || null) && (boolean xor nullRule);
      "requireSpaceBeforePostfixUnaryOperators": (array || boolean || null) && unaryOperators;
      "requireSpaceBetweenArguments": (boolean || null) && (boolean xor nullRule);
      "requireSpacesInAnonymousFunctionExpression": (null || object) && object && [
          "beforeOpeningRoundBrace": boolean || null;
          "beforeOpeningCurlyBrace": boolean || null;
          "allExcept": (boolean || null || array) && (boolean xor nullRule xor array && [ of string && [ enum "shorthand"; ]; ] && [ unique; ] && [ size [0,max]; ]);
];
      "requireSpacesInCallExpression": (boolean || null) && (boolean xor nullRule);
      "requireSpacesInConditionalExpression": (boolean || null || object) && (boolean xor nullRule xor object && [
          "afterTest": boolean;
          "beforeConsequent": boolean;
          "afterConsequent": boolean;
          "beforeAlternate": boolean;
]);
      "requireSpacesInForStatement": (boolean || null) && (boolean xor nullRule);
      "requireSpacesInFunction": (null || object) && braceRules;
      "requireSpacesInFunctionDeclaration": (null || object) && braceRules;
      "requireSpacesInFunctionExpression": (null || object) && braceRules;
      "requireSpacesInGenerator": (null || object) && (nullRule xor object && [
          "beforeStar": boolean;
          "afterStar": boolean;
]);
      "requireSpacesInNamedFunctionExpression": (null || object) && braceRules;
      "requireSpacesInsideArrayBrackets": (null || object || string) && (nullRule xor object && [
          "allExcept": array && [ of string && [ enum "{", "}", "[", "]"; ]; ] && [ unique; ] && [ size [0,max]; ];
] xor string && ([ enum "all"; ] xor [ enum "allButNested"; ]));
      "requireSpacesInsideBrackets": (boolean || null || object) && (boolean xor nullRule xor object && [
          "allExcept": array && [ of string && [ enum "{", "}", "[", "]"; ]; ] && [ unique; ] && [ size [0,max]; ];
]);
      "requireSpacesInsideObjectBrackets": (null || object || string) && (nullRule xor object && [
          "allExcept": array && [ of string && [ enum "(", ")", "{", "}", "[", "]"; ]; ] && [ unique; ] && [ size [0,max]; ];
] xor string && ([ enum "all"; ] xor [ enum "allButNested"; ]));
      "requireSpacesInsideParentheses": (null || object || string) && (nullRule xor object && [
          "all": boolean;
          "ignoreParenthesizedExpression": boolean;
          "except": array && [
              of string && ([ enum "(", ")", "{", "}", "[", "]"; ] || string && [ size [0,1]; ]);
] && [ unique; ] && [ size [0,max]; ];
] xor string && ([ enum "all"; ] xor [ enum "allButNested"; ]));
      "requireSpacesInsideParenthesizedExpression": (boolean || null || object) && (boolean xor nullRule xor object && [
          "allExcept": array && [ of string && [ enum "{", "}", "function"; ]; ] && [ unique; ] && [ size [0,max]; ];
]);
      "requireSpread": (boolean || null) && (boolean xor nullRule);
      "requireTemplateStrings": (boolean || null || object) && (boolean xor nullRule xor object && [
          "allExcept": array && [ of string && [ enum "stringConcatenation"; ]; ] && [ unique; ] && [ size [0,max]; ];
]);
      "requireTrailingComma": (boolean || null || object) && (boolean xor nullRule xor object && [
          "ignoreSingleValue": boolean;
          "ignoreSingleLine": boolean;
]);
      "requireVarDeclFirst": (boolean || null) && (boolean xor nullRule);
      "requireYodaConditions": (array || boolean || null) && (equalityOperators xor boolean xor nullRule);
      "safeContextKeyword": (array || null || string) && (array && [ of string && [ size [1,max]; ]; ] && [ unique; ] && [ size [0,max]; ] xor nullRule xor string && [ size [1,max]; ]);
      "validateAlignedFunctionParameters": (boolean || null || object) && (boolean xor nullRule xor object && [
          "lineBreakAfterOpeningBrace": boolean;
          "lineBreakBeforeClosingBrace": boolean;
]);
      "validateCommentPosition": (null || object) && (nullRule xor object && [
          "position": string && [ enum "above", "beside"; ];
          "allExcept": array && [ of string; ] && [ unique; ] && [ size [0,max]; ];
]);
      "validateIndentation": (Predefined.integer || null || object || string) && (Predefined.integer && [ bounds [0.0,max]; ] xor nullRule xor object && [
          "value": (Predefined.integer || string) && (Predefined.integer && [ bounds [0.0,max]; ] xor string);
          "includeEmptyLines": boolean && [ default false; ];
          "allExcept": array && [ of string && ([ enum "comments"; ] xor [ enum "emptyLines"; ]); ] && [ unique; ] && [ size [0,max]; ];
] && [ required "value"; ]);
      "validateLineBreaks": (null || object || string) && (nullRule xor object && [
          "character": string && [ enum "CR", "LF", "CRLF"; ];
          "reportOncePerFile": boolean;
] xor string && [ enum "CR", "LF", "CRLF"; ]);
      "validateNewlineAfterArrayElements": (boolean || Predefined.integer || null || object) && (boolean xor Predefined.integer && [ bounds [0.0,max]; ] xor nullRule xor object && [
          "maximum": Predefined.integer && [ bounds [0.0,max]; ];
          "ignoreBrackets": boolean;
]);
      "validateOrderInObjectKeys": (boolean || null || string) && (boolean xor nullRule xor string && ([ enum "asc"; ] xor [ enum "asc-insensitive"; ] xor [ enum "asc-natural"; ] xor [ enum "desc"; ] xor [ enum "desc-insensitive"; ] xor [ enum "desc-natural"; ]));
      "validateParameterSeparator": (null || string) && (nullRule xor string && ([ enum ","; ] xor [ enum ", "; ] xor [ enum " ,"; ] xor [ enum " , "; ]));
      "validateQuoteMarks": (boolean || null || object || string) && (boolean xor nullRule xor object && [
          "escape": boolean;
          "mark": string && ([ enum ""; ] xor [ enum ""; ]);
          "ignoreJSX": boolean;
] && [ required "value"; ] xor string && ([ enum "\""; ] xor [ enum "'"; ]));
] && object;
